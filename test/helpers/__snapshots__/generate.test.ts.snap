// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > Generates templates correctly for auto imported documents 1`] = `
{
  "content": "const documents = {
  \\"query\\": {
    \\"simulateEndpointDown\\": \\"query simulateEndpointDown {\\\\n  testFetchOptions {\\\\n    headerClient\\\\n    headerServer\\\\n  }\\\\n}\\",
    \\"fetchOptions\\": \\"query fetchOptions {\\\\n  testFetchOptions {\\\\n    headerClient\\\\n    headerServer\\\\n  }\\\\n}\\",
    \\"getError\\": \\"query getError {\\\\n  getError\\\\n}\\"
  },
  \\"mutation\\": {
    \\"initState\\": \\"mutation initState {\\\\n  initState\\\\n}\\",
    \\"triggerError\\": \\"mutation triggerError {\\\\n  triggerError\\\\n}\\",
    \\"deleteUser\\": \\"mutation deleteUser($id: Int!) {\\\\n  deleteUser(id: $id)\\\\n}\\"
  }
};
export { documents };",
  "filename": "graphql-documents.mjs",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents 2`] = `
{
  "content": "export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  deleteUser?: Maybe<Scalars['Boolean']>;
  initState: Scalars['Boolean'];
  triggerError?: Maybe<Scalars['Boolean']>;
};


export type MutationCreateUserArgs = {
  user: UserData;
};


export type MutationDeleteUserArgs = {
  id: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  getError?: Maybe<Scalars['Boolean']>;
  testFetchOptions?: Maybe<TestFetchOptions>;
  userById?: Maybe<User>;
  users: Array<User>;
};


export type QueryUserByIdArgs = {
  id: Scalars['ID'];
};

export type TestFetchOptions = {
  __typename?: 'TestFetchOptions';
  headerClient?: Maybe<Scalars['String']>;
  headerServer?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['Int'];
  lastName: Scalars['String'];
};

export type UserData = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
};

export type SimulateEndpointDownQueryVariables = Exact<{ [key: string]: never; }>;


export type SimulateEndpointDownQuery = { __typename?: 'Query', testFetchOptions?: { __typename?: 'TestFetchOptions', headerClient?: string | null, headerServer?: string | null } | null };

export type FetchOptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type FetchOptionsQuery = { __typename?: 'Query', testFetchOptions?: { __typename?: 'TestFetchOptions', headerClient?: string | null, headerServer?: string | null } | null };

export type UserFragment = { __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null };

export type GetErrorQueryVariables = Exact<{ [key: string]: never; }>;


export type GetErrorQuery = { __typename?: 'Query', getError?: boolean | null };

export type InitStateMutationVariables = Exact<{ [key: string]: never; }>;


export type InitStateMutation = { __typename?: 'Mutation', initState: boolean };

export type TriggerErrorMutationVariables = Exact<{ [key: string]: never; }>;


export type TriggerErrorMutation = { __typename?: 'Mutation', triggerError?: boolean | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: boolean | null };
",
  "filename": "graphql-operations.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents 3`] = `
{
  "content": "import {
  SimulateEndpointDownQuery,
  FetchOptionsQuery,
  GetErrorQuery,
  InitStateMutation,
  TriggerErrorMutation,
  DeleteUserMutation,
  DeleteUserMutationVariables
} from './graphql-operations'


type GraphqlMiddlewareResponse<T> = {
  data: T
}

declare module '#build/nuxt-graphql-middleware' {
  export type GraphqlMiddlewareQuery = {
    simulateEndpointDown: [null, true, SimulateEndpointDownQuery],
    fetchOptions: [null, true, FetchOptionsQuery],
    getError: [null, true, GetErrorQuery]
  }

  export type GraphqlMiddlewareMutation = {
    initState: [null, true, InitStateMutation],
    triggerError: [null, true, TriggerErrorMutation],
    deleteUser: [DeleteUserMutationVariables, false, DeleteUserMutation]
  }

}

declare module 'nitropack' {
  type Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T
  interface InternalApi {
    'undefined/query/simulateEndpointDown': GraphqlMiddlewareResponse<Awaited<SimulateEndpointDownQuery>>
    'undefined/query/fetchOptions': GraphqlMiddlewareResponse<Awaited<FetchOptionsQuery>>
    'undefined/query/getError': GraphqlMiddlewareResponse<Awaited<GetErrorQuery>>
    'undefined/mutation/initState': GraphqlMiddlewareResponse<Awaited<InitStateMutation>>
    'undefined/mutation/triggerError': GraphqlMiddlewareResponse<Awaited<TriggerErrorMutation>>
    'undefined/mutation/deleteUser': GraphqlMiddlewareResponse<Awaited<DeleteUserMutation>>
  }
}
",
  "filename": "nuxt-graphql-middleware.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for provided documents 1`] = `
{
  "documents": [
    {
      "content": "
            query one {
              users {
                id
              }
            }",
      "errors": [],
      "filename": "nuxt.config.ts",
      "isValid": true,
      "name": "one",
      "operation": "query",
    },
    {
      "content": "
            mutation two($id: Int!) {
              deleteUser(id: $id)
            }",
      "errors": [],
      "filename": "nuxt.config.ts",
      "isValid": true,
      "name": "two",
      "operation": "mutation",
    },
  ],
  "hasErrors": false,
  "templates": [
    {
      "content": "const documents = {
  \\"query\\": {
    \\"one\\": \\"\\\\n            query one {\\\\n              users {\\\\n                id\\\\n              }\\\\n            }\\"
  },
  \\"mutation\\": {
    \\"two\\": \\"\\\\n            mutation two($id: Int!) {\\\\n              deleteUser(id: $id)\\\\n            }\\"
  }
};
export { documents };",
      "filename": "graphql-documents.mjs",
      "hooks": {},
    },
    {
      "content": "export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  deleteUser?: Maybe<Scalars['Boolean']>;
  initState: Scalars['Boolean'];
  triggerError?: Maybe<Scalars['Boolean']>;
};


export type MutationCreateUserArgs = {
  user: UserData;
};


export type MutationDeleteUserArgs = {
  id: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  getError?: Maybe<Scalars['Boolean']>;
  testFetchOptions?: Maybe<TestFetchOptions>;
  userById?: Maybe<User>;
  users: Array<User>;
};


export type QueryUserByIdArgs = {
  id: Scalars['ID'];
};

export type TestFetchOptions = {
  __typename?: 'TestFetchOptions';
  headerClient?: Maybe<Scalars['String']>;
  headerServer?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['Int'];
  lastName: Scalars['String'];
};

export type UserData = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
};

export type OneQueryVariables = Exact<{ [key: string]: never; }>;


export type OneQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number }> };

export type TwoMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type TwoMutation = { __typename?: 'Mutation', deleteUser?: boolean | null };
",
      "filename": "graphql-operations.d.ts",
      "hooks": {},
    },
    {
      "content": "import {
  OneQuery,
  TwoMutation,
  TwoMutationVariables
} from './graphql-operations'


type GraphqlMiddlewareResponse<T> = {
  data: T
}

declare module '#build/nuxt-graphql-middleware' {
  export type GraphqlMiddlewareQuery = {
    one: [null, true, OneQuery]
  }

  export type GraphqlMiddlewareMutation = {
    two: [TwoMutationVariables, false, TwoMutation]
  }

}

declare module 'nitropack' {
  type Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T
  interface InternalApi {
    'undefined/query/one': GraphqlMiddlewareResponse<Awaited<OneQuery>>
    'undefined/mutation/two': GraphqlMiddlewareResponse<Awaited<TwoMutation>>
  }
}
",
      "filename": "nuxt-graphql-middleware.d.ts",
      "hooks": {},
    },
  ],
}
`;

exports[`generate > Renders a table with information about all documents with errors. 1`] = `
"┌───────────┬──────┬────────────────┬──────────────────────────────────────────────────────────────────────┐
│ Operation │ Name │ File           │ Errors                                                               │
├───────────┼──────┼────────────────┼──────────────────────────────────────────────────────────────────────┤
│           │      │ nuxt.config.ts │ Syntax Error: Expected Name, found <EOF>.                            │
│           │      │                │                                                                      │
│           │      │                │ nuxt.config.ts:3:11                                                  │
│           │      │                │ 2 |             id                                                   │
│           │      │                │ 3 |                                                                  │
│           │      │                │   |           ^                                                      │
├───────────┼──────┼────────────────┼──────────────────────────────────────────────────────────────────────┤
│           │      │ nuxt.config.ts │ Syntax Error: Unexpected Name \\"syntax\\".                              │
│           │      │                │                                                                      │
│           │      │                │ nuxt.config.ts:2:13                                                  │
│           │      │                │ 1 |                                                                  │
│           │      │                │ 2 |             syntax error one {                                   │
│           │      │                │   |             ^                                                    │
│           │      │                │ 3 |               users {                                            │
├───────────┼──────┼────────────────┼──────────────────────────────────────────────────────────────────────┤
│ mutation  │ two  │ nuxt.config.ts │ Variable \\"$id\\" of type \\"Int\\" used in position expecting type \\"Int!\\". │
│           │      │                │                                                                      │
│           │      │                │ nuxt.config.ts:2:26                                                  │
│           │      │                │ 1 |                                                                  │
│           │      │                │ 2 |             mutation two($id: Int) {                             │
│           │      │                │   |                          ^                                       │
│           │      │                │ 3 |               deleteUser(id: $id)                                │
│           │      │                │                                                                      │
│           │      │                │ nuxt.config.ts:3:30                                                  │
│           │      │                │ 2 |             mutation two($id: Int) {                             │
│           │      │                │ 3 |               deleteUser(id: $id)                                │
│           │      │                │   |                              ^                                   │
│           │      │                │ 4 |             }                                                    │
└───────────┴──────┴────────────────┴──────────────────────────────────────────────────────────────────────┘"
`;

exports[`generate > Renders a table with information about all documents. 1`] = `
"┌───────────┬──────┬────────────────┬────────┐
│ Operation │ Name │ File           │ Errors │
├───────────┼──────┼────────────────┼────────┤
│           │      │ nuxt.config.ts │        │
├───────────┼──────┼────────────────┼────────┤
│ query     │ one  │ nuxt.config.ts │        │
├───────────┼──────┼────────────────┼────────┤
│ mutation  │ two  │ nuxt.config.ts │        │
└───────────┴──────┴────────────────┴────────┘"
`;
